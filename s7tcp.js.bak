var net = require("net");
var s7comm = require("./s7comm");

var TIMEOUT = 5000;

const _socketConnect = (ip, port) => {
    return new Promise(resolve => {
        socket.setTimeout(TIMEOUT); 
        socket.connect(port, ip);
        socket.once("connect", () => {
            return resolve(true);
        });
    });
};

const _registerSession = (rack, slot) => {
    return new Promise(resolve => {
        let request = Uint8Array.from(s7comm.RegisterSessionRequest(rack, slot));
        let result = socket.write(request, (e) => {
            if (e) {
                throw e;
            };
            socket.once("data", (buffer) => {
                let response = Uint8Array.from(buffer);
                if (response.length != 22)
                {
                    let e = new Error("Error registering session!"); 
                    throw e;
                }                  
                return resolve(true);
            });
        });
    });    
};

const _negotiatePDU = () => {
    return new Promise(resolve => {
        let request = Uint8Array.from(s7comm.NegotiatePDULengthRequest());
        let result = socket.write(request, (e) => {
            if (e) {
                throw e;
            };
            socket.once("data", (buffer) => {
                let response = Uint8Array.from(buffer);
                if (response.length != 27) {
                    let e = new Error("Error negotiating PDU!");
                    throw e;
                }
                return resolve(true);
            });
        });
    });  
};    

const _read = (parArea, areaNumber, start, len, isBit = false) => {
    return new Promise(resolve => {
        let request = Uint8Array.from(s7comm.ReadRequest(parArea, areaNumber, start, len, isBit));
        let result = socket.write(request, (e) => {
            if (e) {
                throw e;
            };
            socket.once("data", (buffer) => {
                let response = Uint8Array.from(buffer);
                if (response.length != 25+len) {
                    let e = new Error("Error on data read request!");
                    throw e;
                }
                if (response[21] != 0xFF){
                    let e = new Error("Error reading data: ") + response[response.prototype.length-1];
                    throw e;
                }
                let dataRead = response.subarray(25, 25 + len);
                return resolve(dataRead);
            });
        });
    });
};

async function connect(ip, port, rack, slot) {
    let connected = await _socketConnect(ip, port); 
    let regSession = await _registerSession(rack, slot);
    let negPDU = await _negotiatePDU(); 
    return true;
};

async function read(parArea, areaNumber, start, len) {
    let data = await _read(parArea, areaNumber, start, len); 
    return data;
};

async function connectAndRead(ip, port, rack, slot, parArea, areaNumber, start, len) {
    let conn = await connect(ip, port, rack, slot);
    let data = await _read(parArea, areaNumber, start, len); 
    return data;
};

function connectAndReadSync(ip, port, rack, slot, parArea, areaNumber, start, len) {
    let connected = _socketConnect(ip, port); 
    let regSession = _registerSession(rack, slot);
    let negPDU = _negotiatePDU();
    let data = _read(parArea, areaNumber, start, len); 
    return data;
};


var socket = new net.Socket();
var connected = false;
socket.on("connect", () => {connected = true; });
socket.on("close", (hasError) => {connected = false;});
//connect("192.168.1.91", 102, 0, 1);
//read(s7comm.ParameterArea.DB, 1, 0, 200, false);
// let data = connectAndRead("192.168.1.91", 102, 0, 1, s7comm.ParameterArea.DB, 1, 0, 200, false)
//     .then(console.log);
let data = connectAndReadSync("192.168.1.91", 102, 0, 1, s7comm.ParameterArea.DB, 1, 0, 200, false);